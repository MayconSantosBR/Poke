// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokemonAPI.Context;

#nullable disable

namespace PokemonAPI.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokemonAPI.Entities.Effect", b =>
                {
                    b.Property<long>("IdEffect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdEffect"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEffect");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Hability", b =>
                {
                    b.Property<long>("IdHability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdHability"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PokemonIdPokemon")
                        .HasColumnType("bigint");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.HasKey("IdHability");

                    b.HasIndex("PokemonIdPokemon");

                    b.ToTable("Habilities");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Pokemon", b =>
                {
                    b.Property<long>("IdPokemon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdPokemon"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPokemon");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonHability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdHability")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPokemon")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdHability");

                    b.HasIndex("IdPokemon");

                    b.ToTable("PokemonHability");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonPokemonType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IdPokemon")
                        .HasColumnType("bigint");

                    b.Property<long>("IdType")
                        .HasColumnType("bigint");

                    b.Property<long?>("PokemonIdPokemon1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdPokemon");

                    b.HasIndex("IdType");

                    b.HasIndex("PokemonIdPokemon1");

                    b.ToTable("PokemonPokemonTypes");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PokemonIdPokemon")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PokemonIdPokemon");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Hability", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Pokemon", null)
                        .WithMany("Habilities")
                        .HasForeignKey("PokemonIdPokemon");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonHability", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Hability", "Hability")
                        .WithMany("PokemonHabilities")
                        .HasForeignKey("IdHability")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Pokemon", "Pokemon")
                        .WithMany("PokemonHabilities")
                        .HasForeignKey("IdPokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hability");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonPokemonType", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Pokemon", "Pokemon")
                        .WithMany("pokemonPokemonTypes")
                        .HasForeignKey("IdPokemon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.PokemonType", "PokemonType")
                        .WithMany("pokemonPokemonTypes")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonAPI.Entities.Pokemon", null)
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokemonIdPokemon1");

                    b.Navigation("Pokemon");

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonType", b =>
                {
                    b.HasOne("PokemonAPI.Entities.Pokemon", null)
                        .WithMany("Types")
                        .HasForeignKey("PokemonIdPokemon");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Hability", b =>
                {
                    b.Navigation("PokemonHabilities");
                });

            modelBuilder.Entity("PokemonAPI.Entities.Pokemon", b =>
                {
                    b.Navigation("Habilities");

                    b.Navigation("PokemonHabilities");

                    b.Navigation("PokemonTypes");

                    b.Navigation("Types");

                    b.Navigation("pokemonPokemonTypes");
                });

            modelBuilder.Entity("PokemonAPI.Entities.PokemonType", b =>
                {
                    b.Navigation("pokemonPokemonTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
